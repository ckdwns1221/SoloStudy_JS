/* 객체의 속성과 메소드 사용하기 */
/* 
    자바스크립트에서 사용하는 자료는 크게 기본 자료형과 객체 자료형으로 구분할 수 있다.
    유연함의 대명사인 JS는 기본자료형이 객체자료형이 될 수도 있다. 어떤 경우에 그렇게 되는지 알아보고,
    이를 활용하는 prototype 객체를 알아보자.
*/

/* 객체 자료형 */
/* 
    속성과 메소드를 가질 수 있는 모든 것은 객체이다. 
    배열도 객체이다.

    const a = []
    a.sample = 10
    a.sample
    >10

    함수도 객체이다.

    function b() {}
    b.sample = 10
    b.sample
    >10

    배열 확인(Array.isArray())
    typeof a
    > "object"
    Array.isArray(a)
    > true
    
    함수 확인(typeof)
    typeof b
    > "function"
*/

/* 기본 자료형 */
/* 
    JS에서는 실체가 있는 것(undefined와 null 등이 아닌 것) 중에 객체가 아닌 것을 기본 자료형이라고 한다.
    숫자, 문자열, 불 이 해당된다.

    // 기본자료형 객체 선언
    // 숫자, 문자열, 불 등으로 자료형을 변환하는 함수(Number, String, Boolean)
    const 객체 = new 객체 자료형 이름()
    이렇게 사용하면 숫자 객체, 문자열 객체, 불 객체를 생성할 수 있다.

    new Number(10)
    new String('안녕하세요')
    new Boolean(true)
    // new 키워드를 사용하지 않으면 함수가 자료형 변환 기능으로 작동함으로 주의!!
*/

/* 기본 자료형의 일시적 승급 */
/* 
    원래 기본 자료형은 속성과 메소드를 가질 수 없다.
    자바스크립트는 사용의 편리성을 위해서 기본 자료형의 속성과 메소드를 호출할 때(기본 자료형 뒤에 온점을 찍고 무언가 하려고 하면)
    일시적으로 기본 자료형을 객체로 승급시킨다. 그래서 속성과 메소드를 사용할 수 있는 것이다.
    따라서 기본 자료형의 경우 속성과 메소드를 사용할 수는 있지만, 속성과 메소드를 추가로 가질 수는 없다.
*/

/* 프로토타입으로 메소드 추가하기 */
/* 
    어떤 객체의 prototype이라는 속성이 바로 객체 전용 옷(틀)이라고 할 수 있다. 
    prototype객체에 속성과 메소드를 추가하면 모든 객체(와 기본 자료형)에서 해당 속성과 메소드를 사용할 수 있다.

    객체 자료형 이름.prototype.메소드이름 = function() {
        
    }
*/